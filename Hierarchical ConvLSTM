#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
@author: Fei Xue
"""

import torch
import torch.nn as nn
from torch.autograd import Variable


class ConvLSTMCell(nn.Module):
    def __init__(self, input_channels, hidden_channels, kernel_size, bias=True):
        super(ConvLSTMCell, self).__init__()

        assert hidden_channels % 2 == 0

        self.input_channels = input_channels
        self.hidden_channels = hidden_channels
        self.bias = bias
        self.kernel_size = kernel_size
        self.num_features = 4


        self.padding = (kernel_size - 1) / 2
        self.conv = nn.Conv2d(self.input_channels + self.hidden_channels, 4 * self.hidden_channels, self.kernel_size, 1,
                              self.padding)
        self.avgpool = nn.AvgPool2d(7,stride=1)

    def forward(self, input, h, c):

        combined = torch.cat((input, h), dim=1)
        A = self.conv(combined)
        (ai, af, ao, ag) = torch.split(A, A.size()[1] / self.num_features, dim=1)
        i = torch.sigmoid(ai)
        f = torch.sigmoid(af)
        o = torch.sigmoid(ao)
        g = torch.tanh(ag)

        new_c = f * c + i * g
        new_h = o * torch.tanh(new_c)
        conv_h = torch.squeeze(self.avgpool(new_h)) 
##        conv_h = conv_h.view(1,-1)   # for batch=1
        return new_h, new_c, conv_h

    @staticmethod
    def init_hidden(batch_size, hidden_c, shape):
        return (Variable(torch.zeros(batch_size, hidden_c, shape[0], shape[1])).cuda(),
                Variable(torch.zeros(batch_size, hidden_c, shape[0], shape[1])).cuda())


class ConvLSTM(nn.Module):
    # input_channels corresponds to the first input feature map
    # hidden state is a list of succeeding lstm layers.
    def __init__(self, input_channels, hidden_channels, kernel_size,num_classes,bias=True):
        super(ConvLSTM, self).__init__()
        self.input_channels = [input_channels] + hidden_channels
        self.hidden_channels = hidden_channels
        self.kernel_size = kernel_size
        self.num_layers = len(hidden_channels)
        self.num_classes = num_classes
        self.bias = bias
        self._all_layers = []
        self.fc = nn.Linear(sum(hidden_channels),num_classes)
        self.drop = nn.Dropout(p=0.7)
        for i in range(self.num_layers):
            name = 'cell{}'.format(i)
            cell = ConvLSTMCell(self.input_channels[i], self.hidden_channels[i], self.kernel_size, self.bias)
            setattr(self, name, cell)
            self._all_layers.append(cell)
            

    def forward(self, input, step, internal_state):
        outputs = []
        x = input
        for i in range(self.num_layers):
            # all cells are initialized in the first step
            if step == 0:
                bsize, _, height, width = x.size()
                (h, c) = ConvLSTMCell.init_hidden(bsize, self.hidden_channels[i], (height, width))
                internal_state.append((h, c))
            # do forward
            name = 'cell{}'.format(i)
            (h, c) = internal_state[i]

            x, new_c, conv_h = getattr(self, name)(x, h, c)
            internal_state[i] = (x, new_c)

            conv_h = torch.squeeze(conv_h)
           # conv_h = conv_h.view(1,-1)  # for bach=1
            outputs.append(conv_h)
        outputs = torch.cat(outputs,dim=1)
        outputs = self.drop(outputs)
        outputs = self.fc(outputs)

        return outputs, internal_state
    

        
        
        
